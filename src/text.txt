import org.w3c.dom.Node;

import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Pattern;

public class Backend implements BackendInterface {

    private GraphADT<String, Double> graph;

    /**
     * Implementing classes should support the constructor below.
     *
     * @param graph object to store the backend's graph data
     */
    public Backend(GraphADT<String, Double> graph) {
        this.graph = graph;
    }

    /**
     * Loads graph data from a dot file.  If a graph was previously loaded, this
     * method should first delete the contents (nodes and edges) of the existing
     * graph before loading a new one.
     *
     * @param filename the path to a dot file to read graph data from
     * @throws IOException if there was any problem reading from this file
     */
    @Override
    public void loadGraphData(String filename) throws IOException {
        List<String> nodes = graph.getAllNodes();
        while (!nodes.isEmpty()) {
            String node = nodes.get(0);
            graph.removeNode(node);
            nodes = graph.getAllNodes();
        }

        try (Scanner scnr = new Scanner(new File(filename))) {
            while (scnr.hasNextLine()) {
                String line = scnr.nextLine().trim();
                //Add helper method with exception to execute this
                if (line.contains("->") && line.contains("[seconds=")) {
                    int sourceStart = line.indexOf("\"") + 1;
                    int sourceEnd = line.indexOf("\"", sourceStart);
                    String source = line.substring(sourceStart, sourceEnd).trim(); //For source node
                    int targetStart = line.indexOf("\"", sourceEnd + 1) + 1;
                    int targetEnd = line.indexOf("\"", targetStart);
                    String target = line.substring(targetStart, targetEnd).trim(); //For target node
                    int secondsStart = line.indexOf("seconds=") + "seconds=".length();
                    int secondsEnd = line.indexOf("]", secondsStart);
                    double weight = Double.parseDouble(line.substring(secondsStart, secondsEnd).trim());//For time
                }
            }
        } catch (IOException e) {
            throw new IOException("Error loading the graph data", e);
        }
    }

    /**
     * Returns a list of all locations (node data) available in the graph.
     *
     * @return list of all location names
     */
    @Override
    public List<String> getListOfAllLocations() {
        return graph.getAllNodes();
    }

    /**
     * Return the sequence of locations along the shortest path from
     * startLocation to endLocation, or an empty list if no such path exists.
     *
     * @param startLocation the start location of the path
     * @param endLocation   the end location of the path
     * @return a list with the nodes along the shortest path from startLocation
     * to endLocation, or an empty list if no such path exists
     */
    @Override
    public List<String> findLocationsOnShortestPath(String startLocation, String endLocation) {
        if (graph.getNodeCount() == 0 || !graph.containsNode(startLocation) || !graph.containsNode(endLocation)) {
            return null;
        }
        List<String> locationList = new ArrayList<>();
        locationList = graph.shortestPathData(startLocation, endLocation);
        try {
            return locationList;
        } catch (NoSuchElementException e) {
            return null;
        }
    }

    /**
     * Return the walking times in seconds between each two nodes on the
     * shortest path from startLocation to endLocation, or an empty list of no
     * such path exists.
     *
     * @param startLocation the start location of the path
     * @param endLocation   the end location of the path
     * @return a list with the walking times in seconds between two nodes along
     * the shortest path from startLocation to endLocation, or an empty
     * list if no such path exists
     */
    @Override
    public List<Double> findTimesOnShortestPath(String startLocation, String endLocation) {
        List<Double> times = new ArrayList<>();
        try {
            List<String> path = graph.shortestPathData(startLocation, endLocation);
            for (int i = 0; i < path.size() - 1; i++) {
                String start = path.get(i);
                String end = path.get(i + 1);
                double time = graph.getEdge(start, end);
                times.add(time);
            }
        } catch (NoSuchElementException e) {
            return null;
        }
        return times;
    }

    /**
     * Returns the longest list of locations along any shortest path that starts
     * from startLocation and ends at any of the reachable destinations in the
     * graph.
     *
     * @param startLocation the location to search through paths leaving from
     * @return the longest list of locations found on any shortest path that
     * starts at the specified startLocation.
     * @throws NoSuchElementException if startLocation does not exist, or if
     *                                there are no other locations that can be reached from there
     */
    @Override
    public List<String> getLongestLocationListFrom(String startLocation) throws NoSuchElementException {
        List<String> longestPath = new ArrayList<>();
        if (!graph.containsNode(startLocation)) {
            throw new NoSuchElementException("Start location does not exist in the graph.");
        }
        List<String> allNodes = graph.getAllNodes();
        for (String destination : allNodes) {
            if (destination.equals(startLocation)) continue;
            List<String> path = graph.shortestPathData(startLocation, destination);
            if (path != null && path.size() > longestPath.size()) {
                longestPath = path;
            }
        }
        if(longestPath.isEmpty()) throw new NoSuchElementException("Longest path list is empty");

            return longestPath;
}
}
